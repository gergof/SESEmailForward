AWSTemplateFormatVersion: '2010-09-09'
Description: 'Cloudformation to forward SES email to another address'
Parameters:
  FromAddress:
    Description: Email forwarded from address
    Type: String
  ToAddress:
    Description: Email forwarded to address
    Type: String
Resources:
    SESEmailForwardFunction:
      Type: AWS::Lambda::Function
      Properties:
        Handler: index.handler
        Role: !GetAtt SESEmailForwardRole.Arn
        Timeout: 30
        Environment:
          Variables:
            from_address: { "Fn::Sub": [ "${FromAddress}", { "FromAddress": {"Ref" : "FromAddress" }} ]}
            to_address: { "Fn::Sub": [ "${ToAddress}", { "ToAddress": {"Ref" : "ToAddress" }} ]}
        Code:
          ZipFile: |
            const { SESClient, SendRawEmailCommand } = require('@aws-sdk/client-ses');

            const forwardFrom = process.env.from_address;
            const forwardTo = process.env.to_address;

            exports.handler = async (event) => {
                const msgInfo = JSON.parse(event.Records[0].Sns.Message);

                if (
                    msgInfo.receipt.spamVerdict.status === 'FAIL' ||
                    msgInfo.receipt.virusVerdict.status === 'FAIL'
                ) {
                    // Don't process spam messages
                    console.log('Message is spam or contains virus, ignoring.');
                    return;
                }

                const headers = [
                    `From: ${msgInfo.mail.commonHeaders.from[0].replace(/<(.*)>/, '')} <${forwardFrom}>`,
                    `To: ${msgInfo.mail.commonHeaders.to}`,
                    `Reply-To: ${msgInfo.mail.commonHeaders.from[0]}`,
                    `X-Original-To: ${msgInfo.mail.commonHeaders.to[0]}`,
                    `Subject: [Incoming] ${msgInfo.mail.commonHeaders.subject}`,
                ];

                let email = msgInfo.content;

                if (email) {
                    const boundary = email.match(/Content-Type:.+\s*boundary.*/);
                    if (boundary) {
                        headers.push(boundary[0]);
                    } else {
                        const contentType = email.match(/^Content-Type:(.*)/m);
                        if (contentType) {
                            headers.push(contentType[0]);
                        }
                    }

                    const contentTransferEncoding = email.match(
                        /^Content-Transfer-Encoding:(.*)/m,
                    );
                    if (contentTransferEncoding) {
                        headers.push(contentTransferEncoding[0]);
                    }

                    const mimeVersion = email.match(/^MIME-Version:(.*)/m);
                    if (mimeVersion) {
                        headers.push(mimeVersion[0]);
                    }

                    // remove headers from original email
                    email = email.split('\r\n\r\n').slice(1).join('\r\n\r\n');
                } else {
                    email = 'Empty email';
                }

                const command = new SendRawEmailCommand({
                    Source: forwardFrom,
                    Destinations: [forwardTo],
                    RawMessage: {
                        Data: headers.join('\r\n') + '\r\n\r\n' + email,
                    },
                });

                const client = new SESClient();

                await client.send(command);
            };
        Runtime: nodejs20.x
    SNSEmailReceiveTopic:
      Type: AWS::SNS::Topic
      Properties:
        Subscription:
        - Endpoint:
            !GetAtt SESEmailForwardFunction.Arn
          Protocol: lambda
    SESEmailForwardRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
        Path: "/"
        Policies:
        - PolicyName: SESEmailForward
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
            - Effect: Allow
              Action:
              - ses:SendEmail
              - ses:SendRawEmail
              Resource: "*"
    SNSLambdaInvokeRole:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        Principal: sns.amazonaws.com
        SourceArn:
          Ref: SNSEmailReceiveTopic
        FunctionName:
          !GetAtt SESEmailForwardFunction.Arn
Outputs:
  LambdaFunction:
    Value: { Ref : SESEmailForwardFunction }
